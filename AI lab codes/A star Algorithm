import heapq

def a_star(graph, start, goal, heuristic):
    open_set = [(0, start)]
    came_from, g_score = {}, {start: 0}
    while open_set:
        _, current = heapq.heappop(open_set)
        if current == goal:wqq                                                                    path = []
            while current:
                path.append(current)
                current = came_from.get(current)
            return path[::-1]s
        for neighbor, cost in graph[current]:
            tentative_g = g_score[current] + cost
            if tentative_g < g_score.get(neighbor, float('inf')):
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g
                f_score = tentative_g + heuristic[neighbor]
                heapq.heappush(open_set, (f_score, neighbor))
    return None

# User input
n = int(input("Enter the number of nodes: "))
graph = {}
for _ in range(n):
    node = input("Enter node: ")
    neighbors = input(f"Enter neighbors and costs from {node} (format: neighbor1:cost neighbor2:cost): ").split()
    graph[node] = [(nbr.split(':')[0], int(nbr.split(':')[1])) for nbr in neighbors]

heuristic = {node: int(input(f"Enter heuristic value for {node}: ")) for node in graph}
start = input("Enter the starting node: ")
goal = input("Enter the goal node: ")

# Run A* algorithm
path = a_star(graph, start, goal, heuristic)
print(f"Path: {' -> '.join(path)}" if path else "No path found")
